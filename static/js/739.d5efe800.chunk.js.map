{"version":3,"file":"static/js/739.d5efe800.chunk.js","mappings":"iOAMA,MA0BA,EA1BqBA,KACnB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACLC,OAAO,MACPC,MAAM,QACNC,SAAUX,EACVY,OACEP,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,KAAK,UACLC,QAASA,KACPZ,GAASa,EAAAA,EAAAA,OACTlB,GAAU,EAAE,EACZS,SACH,eAKD,C,yDC3BV,MAeA,EAfuBU,KAEnBZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCF,EAAAA,EAAAA,KAACa,EAAAA,GAAW,CACVC,OAAO,MACPC,MAAM,MACNC,UAAU,uBACVC,aAAc,CAAC,EACfC,aAAa,uBACbC,YAAY,UACZC,SAAS,a,4ICJjB,MAAMC,EAAiBC,IACrBC,QAAQC,IAAI,UAAWF,EAAU,EAiGnC,EA9FiBG,KACf,MAAM,QAAEC,EAAO,UAAEC,IAAcC,EAAAA,EAAAA,KAEzB9B,GAAWC,EAAAA,EAAAA,MAYjB,OACE8B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA5B,SAAA,EACE2B,EAAAA,EAAAA,MAACE,EAAAA,EACC,CACAC,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,MAAO,CACLC,SAAU,IACVC,UAAW,GACXC,QAAS,GACTC,OAAQ,QAEVC,cAAe,CACbC,UAAU,GAEZC,SA/BWC,IACf9C,GACE+C,EAAAA,EAAAA,IAAS,CACPb,KAAMY,EAAOZ,KACbc,MAAOF,EAAOE,MACdC,SAAUH,EAAOG,WAEpB,EAyBG1B,eAAgBA,EAChB2B,aAAa,MAAK9C,SAAA,EAElBF,EAAAA,EAAAA,KAAC+B,EAAAA,EAAAA,KAAS,CACRkB,MAAM,OACNjB,KAAK,OACLkB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,4BAEXlD,UAEFF,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CAACC,YAAY,8BAGrBtD,EAAAA,EAAAA,KAAC+B,EAAAA,EAAAA,KAAS,CACRkB,MAAM,QACNjB,KAAK,QACLkB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCAEXlD,UAEFF,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CAAC5C,KAAK,QAAQ6C,YAAY,kCAGlCtD,EAAAA,EAAAA,KAAC+B,EAAAA,EAAAA,KAAS,CACRkB,MAAM,WACNjB,KAAK,WACLkB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAEXlD,UAEFF,EAAAA,EAAAA,KAACqD,EAAAA,EAAAA,SAAc,CAACE,UAAW,OAG7BvD,EAAAA,EAAAA,KAAC+B,EAAAA,EAAAA,KAAS,CACRI,WAAY,CACVqB,OAAQ,EACRtB,KAAM,IACNhC,UAEFF,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAACC,KAAK,UAAUgD,SAAS,SAAQvD,SAAC,kBAK5CwB,IAAW1B,EAAAA,EAAAA,KAACR,EAAAA,EAAY,IACxBmC,IAAa3B,EAAAA,EAAAA,KAACY,EAAAA,EAAc,MAC5B,C,0DCpGA,MAAMgB,EAAqBA,KAIzB,CACLF,SAJc9B,EAAAA,EAAAA,IAAY8D,EAAAA,IAK1B/B,WAJgB/B,EAAAA,EAAAA,IAAY+D,EAAAA,K","sources":["components/error-message/ErrorMessage.js","components/loading-spinner/LoadingSpinner.js","components/pages/register/Register.js","hooks/useLoadingAndError.js"],"sourcesContent":["import { Button, Result } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectErrorMessage } from 'features/auth/selectors';\nimport { resetError } from 'features/auth/authSlice';\n\nconst ErrorMessage = () => {\n  const navigate = useNavigate();\n  const errorMessage = useSelector(selectErrorMessage);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"loading-container\">\n      <Result\n        status=\"404\"\n        title=\"ERROR\"\n        subTitle={errorMessage}\n        extra={\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              dispatch(resetError());\n              navigate(-1);\n            }}\n          >\n            Go Back\n          </Button>\n        }\n      />\n    </div>\n  );\n};\nexport default ErrorMessage;\n","import { ProgressBar } from 'react-loader-spinner';\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"loading-container\">\n      <ProgressBar\n        height=\"120\"\n        width=\"120\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"#F4442E\"\n        barColor=\"#51E5FF\"\n      />\n    </div>\n  );\n};\nexport default LoadingSpinner;\n","import { useDispatch } from 'react-redux';\nimport { register } from 'features/auth/operations';\nimport './register.css';\nimport { useLoadingAndError } from 'hooks/useLoadingAndError';\nimport { Button, Form, Input } from 'antd';\nimport ErrorMessage from 'components/error-message/ErrorMessage';\nimport LoadingSpinner from 'components/loading-spinner/LoadingSpinner';\n\nconst onFinishFailed = errorInfo => {\n  console.log('Failed:', errorInfo);\n};\n\nconst Register = () => {\n  const { isError, isLoading } = useLoadingAndError();\n  // const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const onFinish = values => {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    );\n    // form.resetFields();\n  };\n\n  return (\n    <>\n      <Form\n        // form={form}\n        name=\"basic\"\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 16,\n        }}\n        style={{\n          maxWidth: 600,\n          marginTop: 30,\n          padding: 20,\n          margin: 'auto',\n        }}\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your name!',\n            },\n          ]}\n        >\n          <Input placeholder=\"Please type your name!\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your email address!',\n            },\n          ]}\n        >\n          <Input type=\"email\" placeholder=\"Please type email address!\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password minLength={8} />\n        </Form.Item>\n\n        <Form.Item\n          wrapperCol={{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n      {isError && <ErrorMessage />}\n      {isLoading && <LoadingSpinner />}\n    </>\n  );\n};\nexport default Register;\n","import { useSelector } from 'react-redux';\nimport { selectIsError, selectIsLoading } from 'features/auth/selectors';\n\nexport const useLoadingAndError = () => {\n  const isError = useSelector(selectIsError);\n  const isLoading = useSelector(selectIsLoading);\n\n  return {\n    isError,\n    isLoading,\n  };\n};\n"],"names":["ErrorMessage","navigate","useNavigate","errorMessage","useSelector","selectErrorMessage","dispatch","useDispatch","_jsx","className","children","Result","status","title","subTitle","extra","Button","type","onClick","resetError","LoadingSpinner","ProgressBar","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","onFinishFailed","errorInfo","console","log","Register","isError","isLoading","useLoadingAndError","_jsxs","_Fragment","Form","name","labelCol","span","wrapperCol","style","maxWidth","marginTop","padding","margin","initialValues","remember","onFinish","values","register","email","password","autoComplete","label","rules","required","message","Input","placeholder","minLength","offset","htmlType","selectIsError","selectIsLoading"],"sourceRoot":""}